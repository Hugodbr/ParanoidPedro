------------------------------------------------
Ejemplo AI de enemigo
------------------------------------------------

Si está idle
  No hace nada (animación)

Si está atacando
 Ataca (devuelve running hasta acabar)

Si está patrullando
  Si acaba de entrar en el estado
    Resetear la patrulla en los dos ejes X e Y
    ( Flat3D_Path_System.transitityType = TRANSITIVITY.XZ_AXIS )
    Si el estado anterior no era BUSCAR
      Busca el punto de la lista de puntos de control más cercano al él
      ( Path3D_Point p = Flat3D_Path_System.getClosestPathPointTo(self.position) )
      ( Flat3D_Path_System.changeOrientationTowards(p)				   )
  -------------------------------------------- [Exported subtree: PATRULLA_GENERICA]
  Si no ha llegado al Path3D_Point
    Desplazar una unidad hacia Path3D_Point ( Flat3D_Entity.move(Vec3(...)) )
  Si sí
      Cambiar punto objetivo ( Flat3D_Path_System.setNextTargetContext() )
  --------------------------------------------

Si está buscando
  Si no hay punto de búsqueda establecido    
    El punto de búsqueda es el punto de control más cercano al jugador en ese
    momento
    ( Path3D_Point p = Flat3D_Path_System.getClosestPathPointTo(player.position) )
    ( Flat3D_Path_System.changeOrientationTowards(p)				 )

  Si sí
    Se tiene que establecer un punto de control por el que buscar
    ( Path3D_Point p = ...(given point)			)
    ( Flat3D_Path_System.changeOrientationTowards(p)	)

  Se usa la velocidad de persecución (más acelerada)
  ( Flat3D_Entity.groundSpeed = chasingSpeed )

  Sigue el mismo proceso que en la PATRULLA pero descartando el eje Z y hasta donde
  sea posible (si el resto de puntos están en otra zona inaccesible sin usar el
  pasillo). Importa [PATRULLA_GENERICA]
  ( if (Flat3D_Path_System.getTarget().position.z === 0) // Is about to exit de Z axis 		       )
  ( Flat3D_Path_System.transitityType = TRANSITIVITY.X_AXIS // Blocks the next points from being Z > 0 )

  Si pasa un tiempo buscando
    Vuelve al estado de PATRULLA

Si está persiguiendo
  Si está en profundidad (Flat3D_Entity.position.z > 0)
    Desplazar una unidad en sentido -Z
    ( Flat3D_Entity.move(Vec3(0,0,-z)) )

  Si no está a cierta distancia X del jugador (depende del enemigo estará demasiado pegado o lejos)
    Desplazar una unidad hacia el jugador en X (a no ser que salte, mucho lío) o lejos de él
    ( Vector3D diff = ...							)
    ( Flat3D_Entity.move(diff.normalized() * speed) // diff with ideal distance )
  Si sí (rango de distancia ideal)
    Cambiar a estado de ATAQUE

Si ve al jugador
  Si no está atacando
    Cambiar a estado PERSEGUIR
Si no
  Si está en PERSEGUIR
    Cambiar a estado BUSCAR